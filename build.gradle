plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id "net.ltgt.apt-eclipse" version "0.21"
}

version "0.1"
group "micronaut.example"

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly

    all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                // specifying a fixed version for all libraries with 'io.micronaut.data' group
                if (details.requested.group == 'io.micronaut.data') {
                    details.useVersion micronautDataVersion
                }
            }
        }
    }
}

dependencies {
    annotationProcessor enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-graal"
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")

    compileOnly enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    compileOnly "org.graalvm.nativeimage:svm"

    implementation enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.flyway:micronaut-flyway:$micronautFlywayVersion")
    implementation("io.micronaut.configuration:micronaut-jdbc-hikari")
    implementation 'jakarta.persistence:jakarta.persistence-api:2.2.3'

    runtimeOnly("ch.qos.logback:logback-classic:1.2.3")
    runtimeOnly("com.h2database:h2")

    testAnnotationProcessor enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")

    testImplementation enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

test.classpath += configurations.developmentOnly

mainClassName = "micronaut.example.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
        '-parameters',
        // enables incremental compilation
        '-Amicronaut.processing.incremental=true',
        '-Amicronaut.processing.annotations=com.example.*',
        '-Amicronaut.processing.group=micronaut.example',
        '-Amicronaut.processing.module=flyway',
    ])
}
